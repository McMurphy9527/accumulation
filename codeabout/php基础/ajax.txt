AJAX

-----------------------------------原生js调用ajax-----------------------------------

根据不同浏览器创建ajax对象
function createXhr(){
	try(){
		return new XMLHttpRequest();
	}catch(e){
	}
	try(){
		return new ActiveXObject(“Microsoft.XMLHTTP”);
	}catch(e){
	}
}

get请求：
function test(){
	//创建对象
	var xhr = createXhr();
	//初始化对象
	xhr.open('get','index.php?id=4&pwd=234');
	//设置回调函数
	xhr.onreadystatechange = function(){
		//状态码为4并且http状态码为200时
		if(xhr.readyState == 4 | xhr.status == 200){
			//函数体	
		}
	}
	//发送ajax请求
	xhr.send(null);
}
post请求：
function test(){
	//post数据构建
	var data = 数据
	//创建对象
	var xhr = createXhr();
	//初始化对象
	xhr.open('post','index.php');
	//设置请求头
	xhr.setRequestHeader(‘Content-Type’,’Application/x-www-form-urlencoded’);
	//设置回调函数
	xhr.onreadystatechange = function(){
		//状态码为4并且http状态码为200时
		if(xhr.readyState == 4 | xhr.status == 200){
			//函数体	
		}
	}
	//发送ajax请求
	xhr.send(data);
}

-----------------------------------jQuery发送ajax请求-----------------------------------

格式：
	$.get(url,data,function(msg){},type);
	①type为返回类型，默认txt ②msg为txt，json对象，xml DOM对象 ③data为json类型
get请求：
	$('#btn').on('click',function(){
		var data = {
			id:1,
			name:'zhangsan'
		};
		$.get('demo.php',data,function(msg){
			$('#resalt').html(msg.name);
		},'json');
	});
post请求：
	$('#btn').on('click',function(){
		var data = {
			id:1,
			name:'zhangsan'
		};
		$.post('demo.php',data,function(msg){
			$('#resalt').html(msg.getElementsByTagName('name')[0].childNodes(0).nodeValue);
		},'xml');
	});	
原生ajax：
	$.ajax{
		type:get,
		url:'demo.php',
		data:'id=1',
		cache:false,
		success:function(msg){$('#result').html(msg.name);},
		dataType:'json'
	}
	type：请求方式
	url：请求地址
	data：传递的参数，字符串  eg：{name:'jack',age:23}
	dataType：期望的返回值类型
	async：是否异步		true：异步    false：同步
	cache：get请求时是否缓存      false：不缓存   true：缓存
	success：成功时执行的回调函数

-----------------------------------thinkphp中调用ajax-----------------------------------

资料一： http://www.thinkphp.cn/topic/44860.html


-----------------------------------json格式数据处理-----------------------------------

数据格式：
	var person = {
		name:'zhangsan',
		age:23
	}
	var person = [
		{name:'zhangsan',
		age:23},
		{name:'lisi',
		age:24}
	]
php中的处理：
	数组转化为json格式：json_encode();
	json转化为通用数据：json_decode($str,true);默认是false-》对象；true-》数组
js中的处理：
	json字符串转化为json对象eval('('+xhr.responseText+')')
	
-----------------------------------XML格式数据处理-----------------------------------

数据格式：
	<?xml version="1.0" encoding="UTF-8"?>		//文档声明 版本 文字编码
	<books>										//根元素
		<book id=100>							//元素 属性
			<name>三国</name>					//元素 实体
			<price>100</price>
		</book>
		<book id=101>
			<name>水浒</name>
			<price>101</price>
		</book>		
	</books>

注意事项：
	1、第一行必须是文档声明
	2、严格区分大小写 <book></BOOK>是错的
	3、文档必须且只有一个跟元素
	4、在php中xml变量本身是个对象，其数据结构为 对象->数组->对象->数组...循环嵌套
	
php中的处理：
	1、simpleXml
		$xml = simplexml_load_file('demo.xml');
		得到单个数据：echo $xml->book[1]->price;
		得到所有数据：for($i=0;$i<count($xml->book);$i++){
			echo $xml->book[$i]->name;
			echo $xml->book[$i]->price;		
		}
	2、php DOM
		$str .= <book>;
		$str .= <name>;
		$str .= $name;						//从数据库中提出
		$str .= </name>;
		$str .= </book>;
		header('Content-Type:text/xml');	//要想ajax客户端得到xml对象，务必在输出前声明当前的文档格式
		echo $str;

js中的处理：
	var xml = xhr.responseXML;
	var kind = xml.getElementsByTagName('kind');
	var id = kind[0].childNodes[0].childNodes[0].nodeValue;
	p.s.在读取xml对象中的数据时总要在nodeValue前多写一个childNodes[0] ？？？？？
	
-----------------------------------ajax的缓存问题-----------------------------------

1、在url后面加随机数 	var url = 'index.php?n='+ Math.random();
2、加时间戳		var url=’demo.php?_=’+new Date().getTime();
3、设置请求头与响应头

-----------------------------------ajax的跨域问题-----------------------------------

相关资料：http://www.360doc.com/content/14/1030/09/5054188_421070813.shtml

无法跨域的原因：
	基于同源策略，浏览器阻止ajax[从一个域上加载的脚本]获取或操作另一个域上的文档属性。
	<img>的src,<link>的href,<script>的src无视同源策略
	
JSONP技术:
	由于ajax引擎无法请求非同源地址，所以通过script标签的src属性去请求数据并动态调用回调函数
	html部分：
		function callback(msg){}
		window.onload = function(){
			document.getElementsById('btn').onclick() = function(){				//设置点击事件触发jsonp
				var script = document.createElement('script');					//创建一个script标签
				script.src = 'http://www.demo.com/index.php?fnc=callback';		//设置请求的地址和回调用得函数
				document.getElementsByTagName('body')[0].appendChild(script);	//创建该标签
			};
		};
	php部分：
		echo $callback.'('.$json.')';		
	jQuery调用jsonp：
		$.ajax(
			dataType:'jsonp',	
			jsonp:'callback',					//传递给php页面进行处理的回调函数名
			jsonpCallback:'自定义回调函数名',	//实际的回调函数名，如不定义则jquery会随机自定义
			...其他参数同
		);

CORS技术：让B\S之间同意相互传输数据，用过请求声明实现
	在html脚本中 xhr.setRequestHeader("Origin", "http://a.example.com");
	在php 脚本中 header("Access-Control-Allow-Origin:*"); 
	

	
	
	
	
	
	
	
	
	
	
	




